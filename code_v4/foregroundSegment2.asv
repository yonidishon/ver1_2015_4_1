function fSeg = foregroundSegment2(localCueMap,regPOImap,I_LAB,lMap,neighborEdgeDiff)
eMap = zeros(size(regPOImap,1),size(regPOImap,2),1);
eThs = 0.05:0.05:0.9;
eWeights = linspace(1,4,numel(eThs));
eWeights = eWeights./sum(eWeights);
for eIdx=1:numel(eThs)
    eTmp = edge(I_LAB(:,:,1),'canny',eThs(eIdx));
    eMap = eMap + eWeights(eIdx)*eTmp;
end

% figure;imagesc(eMap);axis image;colormap(hot);
figure;imagesc(lMap);axis image;colormap(rand(max(lMap(:)),3));
thValues = unique(regPOImap(:))';
% figure;imagesc(I_LAB(:,:,3));axis image;colormap(hot);
I_LAB = double(lab2uint16(I_LAB));
LABvec = reshape(I_LAB,[numel(localCueMap) 3]);
% figure;plot(thValues);

thValues(1)=[];
% if numel(thValues)>30
%     thValues = thValues(round(linspace(1,numel(thValues),30)));
%     fprintf('\nQuantizing thresholds\n');
% end
figure;imagesc(lMap);axis image;colormap(rand(max(lMap(:)),3));
se = strel('disk',5);

[thA thCC thED thN thEC thObj thSurr thAreaness thOO thOS thSO thSS] = deal(zeros(numel(thValues),1));
minDistance=nanmin(neighborEdgeDiff(neighborEdgeDiff>0));
maxDistance=nanmax(neighborEdgeDiff(:));

for thIdx = 1:numel(thValues)
    th = thValues((thIdx));
    fgLabel = bwlabel(regPOImap>=th);
    numOfFGObjects = max(fgLabel(:));
      
    figure;imagesc(fgLabel);axis image;
    
    ObjPx = regionprops(fgLabel,'PixelIdxList');
    [objED objCC objA objVal surrVal] = deal(zeros(1,numOfFGObjects));
    for indx=1:numOfFGObjects
        objMap = fgLabel==indx;
        figure;imagesc(objMap);colormap(gray);
        objSurround = imdilate(objMap,se) - objMap;
        objOutline = imdilate(bwmorph(objMap,'remove'),se);
        objEdgeD = bwmorph(objOutline & (eMap>0),'clean');
        figure;imagesc(objOutline);colormap(gray);

        objSegments = unique(lMap(objMap));
        surroundSegments = unique(lMap(objOutline));
        %Remove interior segments
        overlappingSegIndx = ismember(surroundSegments,objSegments);
        objEdgeSegments = surroundSegments(overlappingSegIndx);
        surroundSegments(overlappingSegIndx)=[];
        
                [segOMap segSMap] = deal(zeros(size(lMap)));
                for segI = 1:numel(objEdgeSegments)
                   segOMap(lMap==objEdgeSegments(segI))=segI;
                end
                for segI = 1:numel(surroundSegments)
                   segSMap(lMap==surroundSegments(segI))=segI;
                end
                figure;imagesc(segSMap);axis image;colormap(rand(numel(surroundSegments)+1,3));title('S');
                figure;imagesc(segOMap);axis image;colormap(rand(numel(objEdgeSegments)+1,3));title('O');

% %         %
%                 segMap = zeros(size(lMap));
%                 for segI = 1:numel(surroundSegments)
%                 end
%                 figure;imagesc(segMap);axis image;colormap(rand(numel(surroundSegments),3));
        
        
[objVal(indx) surrVal(indx) sVal oVal] = objectSurroundValues(surroundSegments,objEdgeSegments,neighborEdgeDiff,minDistance,maxDistance);

[sMap oMap] = deal(zeros(size(lMap)));
for segI = 1:numel(sVal)
    sMap(lMap==segI & ~isnan(sVal(segI)) ) =sVal(segI);
    oMap(lMap==segI & ~isnan(oVal(segI)) ) =oVal(segI);
end
figure;imagesc(sMap);axis image;colormap(hot);title('S');
figure;imagesc(oMap);axis image;colormap(hot);title('O');

        
        %                 figure;imagesc(objOutline);axis image;colormap(hot);
        %         figure;imagesc(objSurround);axis image;colormap(hot);
%                         figure;imagesc(objMap);axis image;colormap(hot);
        
        %         objOLsum = sum(objOutline(:));
        objEdgeD = double(objEdgeD).*eMap;
        
        %                 figure;imagesc(objEdgeDR);axis image;colormap(hot);
        objED(indx) = mean(objEdgeD(logical(objOutline)));
        
        pxIdx = ObjPx(indx).PixelIdxList;
        surrIdx = find(objSurround);
        objColor = mean(LABvec(pxIdx,:));
        surrColor = mean(LABvec(surrIdx,:));
        objCC(indx) = mean((surrColor-objColor).^2 ./ (surrColor+objColor));
        objA(indx) = numel(pxIdx);
        
    end
    thED(thIdx) = min(objED);
    objSum = sum(objA);
    objR  = (objA./objSum)';
    thCC(thIdx) = (objCC*objR);
    thA(thIdx) = mean(objA);
    thN(thIdx) = numOfFGObjects;
    thObj(thIdx) = (objVal*objR);
    thSurr(thIdx) =(surrVal*objR);

%     if (numOfFGObjects==1)
%         thAreaness(thIdx)=1;
%     else
%         thAreaness(thIdx) = 1-min(objA)/max(objA);
%     end
    
end
thAreaness=1;
cueA = (thObj).*thAreaness;
cueB = (thSurr).*thAreaness;
cueC = (thCC).*thAreaness;

cueA(end)=[];
cueB(end)=[];
figure;plot(cueA);title('Object');
figure;plot(cueB);title('Surround');
figure;plot(cueC);title('Color Contrast');

[pksA,locsA] = findpeaks(cueA);
[pksB,locsB] = findpeaks(cueB);

% bVal = stableNormalize((thObj)).*thAreaness;
% figure;plot(1:numel(thValues),bVal);title('Both');
% [v(1),cId(1)] = max(bVal(1:end-1));
% d(1) = v(1)-mean(bVal);
% figure;plot(1:numel(thValues),thED);title('Edge Density');
[pksC,locsC] = findpeaks(cueC);
candidates = intersect(locsA,locsB);
if isempty(candidates)
    candidates = unique([locsA; locsB; locsC]);
end
% if (any(cueB<(cueA/2)))
%     fprintf('---CueB irrelevant---');
% end
% cueB(cueB<(cueA/2)) = cueA(cueB<(cueA/2));
vals = cueA(candidates)+cueB(candidates);
% figure;plot(vals);
% d(2) = v(2)-mean(cueC);
[~,iii] = max(vals);
c = candidates(iii);


% figure;plot(1:numel(thValues),thA);title('Area');
% figure;plot(1:numel(thValues),thAreaness);title('Areaness');

thVal = thValues(25);
fSeg = regPOImap>=thVal;
figure;imagesc(fSeg);axis image;colormap(hot);

end

function [hitRate , falseAlarm] = hitRates(testMap,gtMap)
neg_gtMap = ~gtMap;
neg_testMap = ~testMap;

hitCount = sum(sum(testMap.*gtMap));
trueAvoidCount = sum(sum(neg_testMap.*neg_gtMap));
missCount = sum(sum(testMap.*neg_gtMap));
falseAvoidCount = sum(sum(neg_testMap.*gtMap));

falseAlarm = 1 - trueAvoidCount / (trueAvoidCount + missCount);

hitRate = hitCount / (hitCount + falseAvoidCount);
end


function [objVal surrVal sVal oVal] = objectSurroundValues(surroundSegments,objEdgeSegments,neighborEdgeDiff,minDistance,maxDistance)

SS = classNeighborDistance(neighborEdgeDiff,surroundSegments);
OO = classNeighborDistance(neighborEdgeDiff,objEdgeSegments);
SO = classNeighborDistance(neighborEdgeDiff,surroundSegments,objEdgeSegments);

SSd = nanmin(SS,[],2)'; %min surround-surround distance
OOd = nanmin(OO,[],1); %min object-object (edge) distance
OSd = nanmax(SO,[],1); %max object-surround distance
SOd = nanmax(SO,[],2)'; %max surround-object distance

% sCand = ~isnan(SSd) & ~isnan(SOd);
% oCand = ~isnan(OOd) & ~isnan(OSd);

% SSb = SSd(sCand)<=3;
% OOb = OOd(oCand)<=3;
% OSb = OSd(oCand)>3;
% SOb = SOd(sCand)>3;
% 
% if (numel(surroundSegments)==1)
%     SSb=true;
% end
% 
% if (numel(objEdgeSegments)==1)
%     OOb=true;
% end
% sVal = SSb.*SOb;
% oVal = OOb.*OSb;
% sVal(sVal==0)=-1;
% oVal(oVal==0)=-1;
% 

% if (numel(surroundSegments)==1)
%     SSd=minDistance;
% end
% 
% if (numel(objEdgeSegments)==1)
%     OOd=minDistance;
% end
sVal = SOd./SSd;
oVal = OSd./OOd;


surrVal = nanmean(sVal);
objVal = nanmean(oVal);




end

function CNdist = classNeighborDistance(neighborEdgeDiff,classA,classB)
logicM = (false(size(neighborEdgeDiff)));
if (~exist('classB','var'))
    classB = classA;
end
%Surround surround
logicM(classA,classB) = true;
logicM(isnan(neighborEdgeDiff))=false;

CNdist = (nan(size(neighborEdgeDiff)));
CNdist(logicM) = neighborEdgeDiff(logicM);
end
